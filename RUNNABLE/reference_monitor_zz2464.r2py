"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        
        # Initialize file state
        self.filename = filename
        self.is_closed = False  # Track if the file is closed

        # If `create=True`, create a new file and track it
        if create:
            self.LPfile = openfile(filename, True)
            
        else:
            # If `create=False` and `default` exists, create the new file from `default`
            if 'default' in listfiles():
                default_file = openfile('default', False)
                content = default_file.readat(None, 0)  # Read entire content of `default`
                self.LPfile = openfile(filename, True)  # Create the new file
                self.LPfile.writeat(content, 0)  # Write `default` content to new file
                default_file.close()
                
            else:
                # If `default` does not exist, raise an error
                raise FileNotFoundError("Cannot create file '{}' without `default` template.".format(filename))

    def readat(self, num_bytes, offset):
        # Check if file is closed
        if self.is_closed:
            raise IOError("Cannot read from closed file '{}'.".format(self.filename))
        
        # Validate offset
        if offset < 0:
            raise ValueError("Offset cannot be negative")

        # Limit the number of bytes that can be read at once for security
        max_read_size = 1024  # Define your max read size here
        if num_bytes is not None and num_bytes > max_read_size:
            raise ValueError("Cannot read more than {} bytes at once".format(max_read_size))

        # Perform the read operation
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        # Check if file is closed
        if self.is_closed:
            raise IOError("Cannot write to closed file '{}'.".format(self.filename))
        
        # Validate offset
        if offset < 0:
            raise ValueError("Offset cannot be negative")

        # Validate data to ensure it's a string
        if not isinstance(data, str):
            raise ValueError("Data to be written must be a string.")

        # Perform the write operation
        return self.LPfile.writeat(data, offset)

    def close(self):
        # Check if file is already closed
        if self.is_closed:
            raise IOError("File '{}' is already closed.".format(self.filename))
        
        # Close the file
        self.LPfile.close()
        self.is_closed = True  # Mark file as closed

        
def LPopenfile(filename, create):
    return LPFile(filename, create)

def LPremovefile(filename):
    # Attempt to remove the file, handling errors if file is in use
    try:
        removefile(filename)
    except Exception as e:
        raise IOError("Cannot remove file '{}': {}".format(filename, str(e))) 


# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()