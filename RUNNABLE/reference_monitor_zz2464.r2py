"""
This security layer inadequately handles the default functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"  
OBJC = "objc"

mycontext['defaultFileHandler'] = None  
mycontext['fileNamesList'] = []
mycontext['file_states'] = {}  # Tracks the open/closed state of each file

class LPFile():
    def __init__(self, filename, create):
        # Set the filename attribute to reference it in other methods
        self.filename = filename
        # globals
        mycontext['debug'] = False  

        if create == False and 'default' in listfiles() and filename not in listfiles():  
            self.LPfile = openfile(filename, True)  
            success = False
            while not success:
                try:
                    # Check if 'default' is already open; if so, use the existing handler
                    if mycontext['file_states'].get('default') == "closed":
                        default_file = openfile('default', False)
                        mycontext['defaultFileHandler'] = default_file
                        mycontext['file_states']['default'] = "open"  # Mark as open
                    else:
                        default_file = mycontext['defaultFileHandler']

                    # Attempt to read content from 'default'
                    content = default_file.readat(None, 0)
                    success = True  # Exit loop after successful read
                except FileClosedError:
                    # Retry if 'default' was closed during the read
                    success = False  # Continue the loop to retry
                except FileInUseError:
                    # Wait briefly and retry if 'default' is in use by another process
                    sleep(0.01)

            # Write the content to the new file after successfully reading 'default'
            self.LPfile.writeat(content, 0)
            mycontext['fileNamesList'].append(filename)  
            mycontext['file_states'][filename] = "open"  # Track file as open




        elif create == True and filename == 'default' and filename not in listfiles():  
            # Check if 'default' is already open
            if mycontext['file_states'].get('default') != "open":
                self.LPfile = openfile(filename, create)  
                mycontext['defaultFileHandler'] = self.LPfile  
                deleteAlreadyClosedFiles()  # Delete previously closed files only when default is newly created
                mycontext['file_states'][filename] = "open"
            else:
                self.LPfile = mycontext['defaultFileHandler']  # Use the existing open handler if already open
        
        else:
            # Ensure file exists if not creating it
            if not create and filename not in listfiles():
                raise FileNotFoundError("Cannot open non-existent file '{filename}' without creating it.")
            
            # Check if "default" is already open to avoid concurrent opening issues
            if filename == "default" and mycontext['file_states'].get("default") == "open":
                # If "default" is open, use the existing handler
                self.LPfile = mycontext['defaultFileHandler']
            else:
                # Proceed with opening or creating the file as specified
                self.LPfile = openfile(filename, create)  
            
            if filename != 'default':
                mycontext['fileNamesList'].append(filename)  
            else:
                # Set the default file handler if it was not open already
                if mycontext['file_states'].get('default') != "open":
                    mycontext['defaultFileHandler'] = self.LPfile

            # Track the file as open in the file states
            mycontext['file_states'][filename] = "open"

    def readat(self, num_bytes, offset):
        return self.LPfile.readat(num_bytes, offset)

    def writeat(self, data, offset):
        self.LPfile.writeat(data, offset)
        if self.LPfile == mycontext['defaultFileHandler']:  
            deleteAlreadyClosedFiles()

    def close(self):
        self.LPfile.close()
        mycontext['file_states'][self.filename] = "closed"
        

def LPopenfile(filename, create):
    return LPFile(filename, create)  

def LPremovefile(filename):
    if filename == 'default' and mycontext['defaultFileHandler'] != None:  
         # Close the default file if it is open
        if mycontext['file_states'].get('default') != "closed":
            mycontext['defaultFileHandler'].close()
            mycontext['defaultFileHandler'] = None  # Reset the handler after closing
        deleteAlreadyClosedFiles()  # Proceed to delete any closed files after default is closed
    elif filename in mycontext['fileNamesList']:
        mycontext['fileNamesList'].remove(filename)
    removefile(filename)  

def deleteAlreadyClosedFiles():
    mycontext['removedfiles'] = set()
    for filename in mycontext['fileNamesList']:
        if filename in listfiles():  # Check if the file still exists
            try:
                removefile(filename)
                mycontext['removedfiles'].add(filename)
            except FileInUseError:
                continue
    mycontext['fileNamesList'] = list(set(mycontext['fileNamesList']) - mycontext['removedfiles'])

# The code below sets up type checking and variable hiding for you.
# You should not change anything below this point.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: type(None),
    TARGET: LPremovefile
}

# Execute the user code
secure_dispatch_module()